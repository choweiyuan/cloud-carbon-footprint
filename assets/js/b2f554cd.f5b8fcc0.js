"use strict";(self.webpackChunkwww_cloudcarbonfootprint_org=self.webpackChunkwww_cloudcarbonfootprint_org||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"ccf-on-vm","metadata":{"permalink":"/blog/ccf-on-vm","editUrl":"https://github.com/cloud-carbon-footprint/cloud-carbon-footprint/blog/2023-08-23-ccf-on-vm.md","source":"@site/blog/2023-08-23-ccf-on-vm.md","title":"Running and Deploying CCF in a Virtual Machine","description":"Since the launch of Cloud Carbon Footprint (CCF), our team always aimed to maintain and develop flexibility in both how the tool is used and the options for its deployment. With such a large variety of infrastructure across organizations, we strive to balance supporting as many environments out of the box as possible while also preserving the customization options you may need.","date":"2023-08-23T00:00:00.000Z","formattedDate":"August 23, 2023","tags":[{"label":"thoughtworks","permalink":"/blog/tags/thoughtworks"},{"label":"deployment","permalink":"/blog/tags/deployment"}],"readingTime":10.505,"hasTruncateMarker":false,"authors":[{"name":"Arik Smith","title":"Senior Software Engineer @ Thoughtworks","url":"https://github.com/4upz","email":"arik.m.smith@gmail.com","imageURL":"https://github.com/4upz.png","key":"asmith"}],"frontMatter":{"slug":"ccf-on-vm","title":"Running and Deploying CCF in a Virtual Machine","authors":"asmith","tags":["thoughtworks","deployment"]}},"content":"Since the launch of Cloud Carbon Footprint (CCF), our team always aimed to maintain and develop flexibility in both how the tool is used and the options for its deployment. With such a large variety of infrastructure across organizations, we strive to balance supporting as many environments out of the box as possible while also preserving the customization options you may need.\\n\\nOne of the most popular options for both piloting a CCF instance as a proof of concept as well as for an internal production environment is to run CCF within a virtual machine. After all, it is a great way to get your feet wet with CCF without bringing extra dependencies on your local machine, tying up any resources, and enabling options for an always-on service that expands beyond your local machine. Alternatively, you may want to get creative by customizing or automating how CCF fits into your use cases. For example, perhaps you may want to set up a cloud function that automatically fetches cloud estimates for every recent day, week, or month? Or maybe you want a fully accessible CCF API for members of your organization or team to query? If any of these benefits sound appealing then the VM option might be for you, and you\u2019re in the right place!\\n\\nVirtual machines come in many shapes and sizes across different cloud provider platforms, including AWS EC2, Google Cloud Compute Engine, and Azure Virtual Machine services. For the sake of this article, we\u2019ll be focusing on how to create a CCF application running on an AWS EC2 instance. However, depending on the chosen operating system or distribution of your machine, the steps should be relatively the same!\\n\\n## Creating your EC2 Instance\\n\\nCCF at its core is a Node application running Express.JS for its API and React for its client. So once you have the environment setup for one endpoint of the application, you\u2019ll be able to run instances of CCF\u2019s API, CLI, and Client on the same machine, and switch between them if desired. Before we do that, let\u2019s create our machine and set up our environment.\\n\\nTo start, we assume that you already have the following:\\n\\n- An existing AWS account with permissions for creating and managing EC2 instances\\n- Followed the steps for setting up billing data for your [cloud provider](https://www.cloudcarbonfootprint.org/docs/aws) (i.e. AWS steps 1-3)\\n- Basic familiarity with navigating the AWS console\\n\\nLet\u2019s navigate to the EC2 dashboard and select the option to launch a new instance using the shiny \u201cLaunch Instances\u201d button:\\n\\n![Launch Instances Button](../static/img/ccf_vm_blog_img_1.png)\\n\\nFrom this point, we\u2019ll be selecting the configuration options for our new machine. While the free tier may be tempting, we\u2019ll go with a t2.medium. I\u2019ve found that on smaller instances such as a t2.micro, the limited hardware can sometimes cause issues when installing node modules or running the app. So we could use the extra \u201coomph\u201d. However, for the sake of your own instance, please consider the following:\\n\\n- If you\u2019re expecting a large amount of estimates, consider a larger instance with higher memory and compute power.\\n- If you plan on running a [MongoDB instance](https://www.cloudcarbonfootprint.org/docs/data-persistence-and-caching#mongodb-storage) on the same machine and persisting a large amount of estimates, consider increasing the storage capacity of your instance.\\n- If costs and efficiency is top of mind, consider choosing the option for an ARM instance as you will not be able to migrate from a non-ARM instance afterwards.\\n- Running EC2 instances incur costs! So make sure to stop/delete instances when done with them and that you choose a capable instance that fits within your budget.\\n\\n![Launch Instances Config](../static/img/ccf_vm_blog_img_2.png)\\n\\nYou may also notice that we\u2019ll be going with an Ubuntu image as our operating system \u2013 a popular and widely accepted distribution that you can use with any VM host. You\u2019re welcome to choose a different Linux-based operating system such as Amazon Linux in the case of an EC2 instance. Amazon Linux serves as a Linux distribution optimized for running in AWS. It is also optimized for running most Linux-based software making the steps you\u2019ll follow almost identical. For the sake of keeping this tutorial a little more friendly for other cloud VM services, we\u2019ll be sticking with Ubuntu.\\n\\nAfter making some final decisions in creating a key pair (required for connecting via an SSH client) and choosing a security group, we\u2019re going to hit the even more shiny \u201cLaunch Instance\u201d button. After a short wait, you should see a notification that the instance has been created and is running. So let\u2019s connect to it!\\n\\n_Side Note_: If you\u2019re more comfortable with the [cloud provider CLI](https://aws.amazon.com/cli/) or other ways of configuring resources, these steps can be replicated using those methods as well.\\n\\n## Setting Up Your CCF Instance\\n\\nConnect to your instance using your preferred method \u2013 whether it be in the cloud provider console or through a local terminal via SSH. Once you\u2019re in, we will need to configure NPM and Node so that our server can support CCF\u2019s code.\\n\\n### Installing Node.JS\\n\\nWe\u2019ll be following the officially recommended steps for [setting up Node.JS on an EC2 Instance](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html). Henceforth, we will be relying on NVM to make this an easy process! [NVM](https://www.bing.com/search?pglt=641&q=nvm&cvid=ef35fe5448b345eba7740e8aae9b0b8e&aqs=edge..69i57j0l5j69i61l3.383j0j1&FORM=ANNTA1&PC=U531) will manage our versions of Node for us, making migrating or downgrading easier.\\n\\n```console\\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\\n```\\n\\nWe then need to activate NVM by running the following command:\\n\\n```console\\n. ~/.nvm/nvm.sh\\n```\\n\\nYou can verify that it is active by running `nvm -v` in which you should see an output of `0.39.5` or similar.\\n\\nCCF requires NodeJS 16 or later. While I prefer 18 since it is the current LTS release, you will need to run the following command \u2013 replacing the number with the version that you wish to install:\\n\\n```console\\nnvm install 18\\n```\\n\\n_Note_: Make sure to check the latest version compatibility that your image supports. For example, Amazon Linux 2 does not support Node 18 at the time of writing this article.\\n\\nNVM will also inform you that it is setting the current version as the default. This is useful for whenever you need to switch node versions or have node disabled for some reason, as you can use `nvm use \u2013default` to re-enable it. You can verify that Node is successfully installed by running `node -v`, in which you should see an output of the version that you installed.\\n\\n### Installing Yarn\\n\\nWhile installing node also automatically installs npm, CCF uses [Yarn](https://v3.yarnpkg.com/) as its package manager. Fortunately, Node 16 and up make it super easy to install thanks to its inclusion of [corepack](https://github.com/nodejs/corepack).\\n\\nTo install Yarn, we simply need to enable corepack using the following command:\\n\\n```console\\ncorepack enable\\n```\\n\\nWith a little magic, you can now use `yarn -v` to verify that yarn is now installed and enabled in your server. You\u2019ll see that version 1 (yarn classic) is enabled. If you\u2019ve been reading the CCF documentation, you may notice that it requires Yarn 3. Do not fear, CCF will take care of the upgrade during its installation.\\n\\nNow for the fun part!\\n\\n### Installing CCF\\n\\nThere are multiple ways to install CCF, as noted in the [Getting Started](https://www.cloudcarbonfootprint.org/docs/getting-started) section. While you can clone the app and get full access to all of its packages and latest features as soon as they are available, we\u2019re going to go with the [Create App](https://www.cloudcarbonfootprint.org/docs/create-app) option as the more stable and simple solution.\\n\\nTo get started, we will run the create-app command with an additional flag to note that we wish to skip the `yarn install` step. This gives us flexibility in case we wish to connect our data using the [guided install](https://www.cloudcarbonfootprint.org/docs/getting-started#guided-install) process, which will end up doing the installation step for us.:\\n\\n```console\\nnpx @cloud-carbon-footprint/create-app --skip-install\\n```\\n\\nYou\u2019ll be asked to install the latest version of the `create-app` package, in which you can reply \u201cyes\u201d.\\n\\n![Name Create App](../static/img/ccf_vm_blog_img_3.png)\\n\\nWhen prompted for a name, feel free to choose whichever name you prefer your app to have. In this example we\u2019ll be going `my-ccf-app`. Take note that this will also be the name of the directory that the app will be created in. So you may want to make sure the name is unique and matches any folder naming conventions you may have.\\n\\nAfterwards, you\u2019ll see that the script takes care of creating your files and moving them to a directory named after your app. Your app will be successfully created!\\n\\n![Create App Successful](../static/img/ccf_vm_blog_img_4.png)\\n\\nUse `cd my-ccf-app` to switch to the directory of your app. You should see the following contents within your directory:\\n\\n```console\\nlerna.json  package.json  packages  tsconfig.json\\n```\\n\\n_Note_: If you run `yarn -v` again while in the directory, you\u2019ll see that the version has automatically updated to 3.1.1 like magic. \u2728\\n\\nAt this moment, you can either connect your data by manually creating a `.env` file in either your `packages/api` or `packages/cli` directory based on the `.env.template` files in those same directories. Make sure to check out the documentation on how to connect data for your chosen cloud provider:\\n\\n- [AWS](https://www.cloudcarbonfootprint.org/docs/aws)\\n- [Google Cloud](https://www.cloudcarbonfootprint.org/docs/gcp)\\n- [Azure](https://www.cloudcarbonfootprint.org/docs/azure)\\n\\nAlternatively, you can use the guided installation method mentioned above to run a friendly CLI program that will walk you through setting up your credentials and will create the `.env` files for you!\\n\\nIf you\u2019d rather skip connecting your data altogether, you can also [run with mock data](https://www.cloudcarbonfootprint.org/docs/run-with-mocked-data) instead and move on to the next step.\\n\\n## Running Your App\\n\\nAfter following the setup method of your choice, let\u2019s top things off by doing a `yarn install`. Once the dependencies are done installing, we\u2019re good to [start our app](https://www.cloudcarbonfootprint.org/docs/getting-started#starting-the-app)!\\n\\nYou can now use `yarn start` to concurrently start both the Client (react dashboard) and the API (express app).\\n\\n- If running the client or with mock data, your CCF Dashboard will be available at port 3000 of your instance. You can view the dashboard by navigating to the public IP of your instance followed by the corresponding port.\\n  - Please note, you will need to configure your security or network settings to make this port available\\n- You can also use `yarn start-api` instead to only [run the API](https://www.cloudcarbonfootprint.org/docs/running-the-api). You can verify that the API is running by making a request to one of the endpoints on port 4000 of the instance.\\n  - For example, try making the following command in another terminal instance:\\n    <br/>\\n    `curl http://[your-ip]:4000/api/regions/emissions-factors`\\n  - Please note, you will need to configure your security or network settings to make this port available if attempting to make requests outside of the instance.\\n- You can also use yarn `start-cli` for [running the CLI](https://www.cloudcarbonfootprint.org/docs/running-the-cli) and requesting estimates directly within the terminal.\\n\\nCongratulations! You now have successfully created a CCF app running in a virtual machine.\\n\\nYou may notice that if you exit the SSH or terminal session, that the running process will not persist. In this case, you can use a tool such as a [Screen](https://www.gnu.org/software/screen/) to create an uninterruptible terminal session to run your app in. To do so, try running the following command:\\n\\n```console\\nscreen -S ccf\\n```\\n\\nThis will create a new Screen session called \u201cccf\u201d. From here, you can run one of the `yarn start` commands to run your app and then use `ctrl+a` `ctrl+d` command keys to detach from the session. The session will stay on in the background and your CCF app will stay running!\\n\\nYou can always reattach to the session by entering `screen -r` in your terminal.\\n\\nIf you\u2019re more comfortable and don\u2019t like the idea of having terminal sessions running in the background, you can also create a `.service` file to [run your application as a background service](https://stackoverflow.com/questions/4018154/how-do-i-run-a-node-js-app-as-a-background-service) instead.\\n\\n## What Now?\\n\\nNow that you have an always-running CCF instance on a cloud-based virtual machine, you can now continue to explore both realtime and historical estimates for all of your services in the cloud. If you\u2019d like to explore additional ways to enhance your CCF app, consider the following:\\n\\n- [Running the CCF App with Docker](https://www.cloudcarbonfootprint.org/docs/run-with-docker)\\n- Creating a cron-triggered cloud function to automatically fetch new estimates\\n- Configuring a MongoDB instance to [persist new and historical estimate data](https://www.cloudcarbonfootprint.org/docs/data-persistence-and-caching#mongodb-storage)\\n- Using the CLI app to [seed data into the configured cache option](https://www.cloudcarbonfootprint.org/docs/data-persistence-and-caching#seeding-cache-file) for your instance\\n- Creating an internal dashboard for your team or organization to view estimate data\\n\\nHopefully you\u2019ve found this walkthrough helpful and see that this is only the beginning of your cloud carbon footprint journey and taking steps to help create a greener cloud! For more walkthroughs and technical deep dives, make sure to keep following the [CCF Blog](http://cloudcarbonfootprint.org/blog) and share your experience on our [discussions page](https://github.com/cloud-carbon-footprint/cloud-carbon-footprint/discussions)!"}]}')}}]);